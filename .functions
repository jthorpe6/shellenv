#!/usr/bin/env zsh

delete_local_tm_snapshots() {
    for snapshot in $(tmutil listlocalsnapshots / | cut -d '.' -f 4 | grep -v Snapshots)
    do
	sudo tmutil deletelocalsnapshots $snapshot
    done
}

gi() {
    curl -sLw n "https://www.toptal.com/developers/gitignore/api/$@"
}

encrypt() {
    local FILE=$1
    tar cz "$FILE" | openssl enc -aes-256-cbc -e -v > "$FILE.tar.gz.enc"
}

synhilight(){
    FILENAME=$1
    if [[ -z "$FILENAME" ]]
    then
	printf "%s" "filename?: "
	read -r FILENAME
    fi

    pygmentize -f rtf -l r "$FILENAME" | pbcopy
}

if type emacs &>/dev/null
then
    magit(){
        if [ -d "$1" ]; then
            cd "$1" || exit
        fi
        emacsclient -nw -c -s ~/.emacs.d/server/server --eval "(magit)" --no-wait
    }

    htmlorg() {
        ORGFILE=$1
        if [[ -z "$ORGFILE" ]]
        then
            echo -e "Usage: $funcstack[1] <file.org> "
            return
        fi
        emacs $ORGFILE --batch -q \
              --eval '(setq user-full-name nil)' \
              --eval '(setq org-html-validation-link nil)' \
              --eval '(setq org-export-html-postamble nil)' \
              --eval "(setq org-export-htmlize-output-type \'css)" \
              -f org-html-export-to-html --kill
    }
    ec(){
	local server="$HOME/.emacs.d/server/server"
	if type jmacs &>/dev/null; then
	    if [[ -S "$HOME/.emacs.d/server/server" ]]; then
		emacsclient -nw -c -s $HOME/.emacs.d/server/server "$@"
	    else
		jmacs -nobackups -wordwrap "$@"
	    fi
	else
	    emacsclient -nw -c -s $HOME/.emacs.d/server/server "$@"
	fi
    }
fi

if type fzf &>/dev/null
then
    # https://github.com/junegunn/fzf/wiki/examples
    fzd() {
	DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
	    && cd "$DIR"
    }

    fkill() {
	local pid
	if [ "$UID" != "0" ]; then
            pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
	else
            pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
	fi

	if [ "x$pid" != "x" ]
	then
            echo $pid | xargs kill -${1:-9}
	fi
    }

    fgl() {
	git log --graph --color=always \
	    --format="%C(auto)%h%d %s %C(white)%C(bold)%cr" "$@" |
	    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
		--bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
		FZF-EOF"
    }

    if type brew &>/dev/null
    then
	bip() {
	    local inst=$(brew search "$@" | fzf -m)

	    if [[ $inst ]]; then
		for prog in $(echo $inst);
		do; brew install $prog; done;
	    fi
	}

	bup() {
	    local upd=$(brew leaves | fzf -m)

	    if [[ $upd ]]; then
		for prog in $(echo $upd);
		do; brew upgrade $prog; done;
	    fi
	}

	bcp() {
	    local uninst=$(brew leaves | fzf -m)

	    if [[ $uninst ]]; then
		for prog in $(echo $uninst);
		do; brew uninstall $prog; done;
	    fi
	}
    fi
fi
